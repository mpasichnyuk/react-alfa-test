{"version":3,"sources":["Loading.js","TourCard.js","Tours.js","App.js","index.js"],"names":["Loading","className","TourCard","id","isLiked","image","info","price","name","removeTour","setLike","useState","readMore","setReadMore","useDispatch","useSelector","state","tours","src","alt","substring","onClick","style","color","fontSize","Tours","showLiked","allTours","dispatch","updateState","React","useCallback","console","log","filter","tour","toggleShowLiked","type","payload","length","map","key","App","loading","setLoading","forceUpdate","fetchTours","a","fetch","response","json","forEach","find","x","newTours","defaultState","cash","store","createStore","action","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.467449c7.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Loading = () => {\n    return (\n        <div className=\"loading\">\n            <h2>Loading tours data now...</h2>\n        </div>\n    );\n};\n\nexport default Loading;\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FaHeart, FaRegHeart } from \"react-icons/fa\";\n\nconst TourCard = ({\n    id,\n    isLiked,\n    image,\n    info,\n    price,\n    name,\n    removeTour,\n    setLike,\n}) => {\n    const [readMore, setReadMore] = useState(false);\n    const dispatch = useDispatch();\n    const allTours = useSelector((state) => state.tours);\n\n    return (\n        <article className=\"single-tour\">\n            <img src={image} alt={name} />\n            <footer>\n                <div className=\"tour-info\">\n                    <h4>{name}</h4>\n                    <h4 className=\"tour-price\">${price}</h4>\n                </div>\n                <p>\n                    {readMore ? info : `${info.substring(0, 200)}...`}\n                    <button onClick={() => setReadMore(!readMore)}>\n                        {readMore ? `read less` : `read more`}\n                    </button>\n                </p>\n                <button onClick={() => removeTour(id)} className=\"delete-btn\">\n                    DELETE\n                </button>{\" \"}\n                <button\n                    onClick={() => setLike(id, isLiked)}\n                    className=\"delete-btn like-btn\"\n                >\n                    {isLiked ? (\n                        <FaHeart style={{ color: \"red\", fontSize: \"50px\" }} />\n                    ) : (\n                        <FaRegHeart\n                            style={{ color: \"red\", fontSize: \"50px\" }}\n                        />\n                    )}\n                </button>\n            </footer>\n        </article>\n    );\n};\n\nexport default TourCard;\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport TourCard from \"./TourCard\";\n\nconst Tours = ({ setLike, removeTour }) => {\n    const showLiked = useSelector((state) => state.showLiked);\n    let allTours = useSelector((state) => state.tours);\n    const dispatch = useDispatch();\n    const [state, updateState] = useState();\n    const forceUpdate = React.useCallback(() => updateState({}), []);\n    console.log(\"sholiked is now: \", showLiked);\n\n    if (showLiked) {\n        allTours = allTours.filter((tour) => {\n            return tour.isLiked;\n        });\n    }\n\n    const toggleShowLiked = () => {\n        console.log(\"called the toggleshowliked\");\n        dispatch({ type: \"TOGGLE_SHOW_LIKED\", payload: !showLiked });\n        // forceUpdate();\n    };\n\n    return (\n        <section>\n            <div className=\"title\">\n                <h4>\n                    <em>Mikhail Pasichniuk test assignment</em>\n                </h4>\n                <h2>Tours list</h2>\n                <div className=\"underline\"></div>\n                {showLiked ? (\n                    <div>\n                        <button\n                            onClick={() => toggleShowLiked()}\n                            className=\"btn\"\n                        >\n                           Show all tours\n                        </button>\n                        <h4>\n                           Showing only liked tours: {allTours.length}{\" \"}\n                            tour(s)\n                        </h4>\n                    </div>\n                ) : (\n                    <div>\n                        <button\n                            onClick={() => toggleShowLiked()}\n                            className=\"btn\"\n                        >\n                           Show liked only\n                        </button>\n                        <h4>\n                            Showing all tours: {allTours.length} tour(s)\n                        </h4>\n                    </div>\n                )}\n            </div>\n            <div className=\"mainContent\">\n                {allTours.map((tour) => {\n                    return (\n                        <TourCard\n                            key={tour.id}\n                            isLiked={tour.isLiked}\n                            {...tour}\n                            removeTour={removeTour}\n                            setLike={setLike}\n                        ></TourCard>\n                    );\n                })}\n            </div>\n        </section>\n    );\n};\n\nexport default Tours;\n","import React, { useState, useEffect } from \"react\";\nimport Loading from \"./Loading\";\nimport Tours from \"./Tours\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\n// URL for API to fetch the data\nconst url = \"https://course-api.com/react-tours-project\";\n\nfunction App() {\n    const dispatch = useDispatch();\n    const allTours = useSelector((state) => state.tours);\n    const [loading, setLoading] = useState(false);\n    const [state, updateState] = useState();\n    const forceUpdate = React.useCallback(() => updateState({}), []);\n\n    const setLike = (id, isLiked) => {\n        allTours.find((x) => x.id === id).isLiked = !isLiked;\n        console.log(\"set liked wroked! \", allTours);\n        dispatch({ type: \"UPDATE_TOURS\", payload: allTours });\n        forceUpdate();\n    };\n\n    const removeTour = (id) => {\n        const newTours = allTours.filter((tour) => tour.id !== id);\n        dispatch({ type: \"UPDATE_TOURS\", payload: newTours });\n    };\n\n    const fetchTours = async () => {\n        setLoading(true);\n\n        try {\n            const response = await fetch(url);\n            const tours = await response.json();\n            setLoading(false);\n            tours.forEach((tour) => {\n                tour.isLiked = false;\n            });\n            dispatch({ type: \"UPDATE_TOURS\", payload: tours });\n        } catch (error) {\n            setLoading(false);\n            console.log(error);\n        }\n    };\n\n    // useEffect(() => {\n    //     fetchTours();\n    // }, []);\n\n    if (loading) {\n        return (\n            <main>\n                <Loading />\n            </main>\n        );\n    }\n\n    if (allTours.length === 0) {\n        return (\n            <main>\n                <div className=\"title\">\n                    <h4>\n                        <em>Mikhail Pasichniuk test assignment</em>\n                    </h4>\n                    <p>SPA fetching API data and showing cards with available tours</p>\n                    <h2>The list is empty</h2>\n                    <button className=\"btn\" onClick={() => fetchTours()}>\n                        Load tours\n                    </button>\n                </div>\n            </main>\n        );\n    }\n\n    return (\n        <main>\n            <Tours setLike={setLike} removeTour={removeTour} />\n        </main>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nconst defaultState = {\n    cash: 220,\n    tours: [],\n    showLiked: false,\n};\n\nfunction reducer(state = defaultState, action) {\n    switch (action.type) {\n        case \"LOAD_TOURS\":\n            return { ...state, tours: action.payload };\n        case \"UPDATE_TOURS\":\n            return { ...state, tours: action.payload };\n        case \"SET_LIKE\":\n            return { ...state, tours: action.payload };\n        case \"TOGGLE_SHOW_LIKED\":\n            return { ...state, showLiked: action.payload };\n        case \"ADD_CASH\":\n            return { ...state, cash: state.cash + action.payload };\n        case \"GET_CASH\":\n            return { ...state, cash: state.cash - action.payload };\n        default:\n            return state;\n    }\n}\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}